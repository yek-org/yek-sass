// NOTE : may this be confiusing, then rename to `val` or `value`
@function val($name) {
  @return unquote('var(--#{$name})');
}

// HINT : set variable property with value
@mixin set-var($name, $value) {
  --#{$name}: #{$value};
}

// HINT : get variable color with `rgba` method
@function color($var-name) {
  @return #{val($var-name)};
}

// HINT : set the `:root` selector variable
@mixin set-root($variables) {
  @at-root :root {
    @each $name, $value in $variables {
      @include set-var($name, $value);
    }
  }
}

// HINT : if you want to use hex or hsl color method use this for initial and variable value setting
@function to-rgb($color, $alpha: 1, $sep: ' ') {
  $red: red($color);
  $green: green($color);
  $blue: blue($color);
  $res: null;
  @if $sep == ' ' {
    $res: '#{$red}#{$sep}#{$green}#{$sep}#{$blue} / #{$alpha}';
  } @else {
    $res: '#{$red}#{$sep}#{$green}#{$sep}#{$blue}#{$sep}#{$alpha}';
  }
  @return unquote('rgb(#{$res})');
}

// HINT : if you want to use hex or rgb color method, use this for initial and variable value setting
@function to-hsl($color, $alpha: 1, $sep: ' ') {
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);
  $res: null;
  @if $sep == ' ' {
    $res: '#{$hue}#{$sep}#{$saturation}#{$sep}#{$lightness} / #{$alpha}';
  } @else {
    $res: '#{$hue}#{$sep}#{$saturation}#{$sep}#{$lightness}#{$sep}#{$alpha}';
  }
  @return unquote('hsl(#{$res})');
}
